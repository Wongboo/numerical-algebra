//
// Created by 包信和 on 2020/10/2.
//

#include <random>

#include <Cholesky_decompose.hpp>
#include <Gauss_elimination.hpp>
#include <auxiliary.hpp>

using namespace happy_matrix;

int main(){
    matrix<double> to_decompose(1000, vector<double>(1000));
    vector<double> to_solve(1000);
    std::random_device rd;  //Will be used to obtain a seed for the random number engine
    std::mt19937 gen(rd()); //Standard mersenne_twister_engine seeded with rd()
    std::uniform_real_distribution<> dis(-1.0, 1.0);

    for (size_t i = 0; i < 1000; ++i){
        if (i != 0)
            to_decompose[i][i - 1] = 1;
        to_decompose[i][i] = 10;
        if (i != 83)
            to_decompose[i][i + 1] = 1;
    }

    for (size_t i = 0; i < 1000; ++i) {
        // Use dis to transform the random unsigned int generated by gen into a
        // double in [-1, 1). Each call to dis(gen) generates a new random double
        to_solve[i] = dis(gen);
    }

    auxiliary<double, true>(Gauss_solve_normal, "Gauss_solve_normal", to_decompose, to_solve);
    auxiliary<double, true>(Gauss_solve_column, "Gauss_solve_column", to_decompose, to_solve);
    auxiliary<double, true>(LLT_solve, "LLT_solve", to_decompose, to_solve);
    auxiliary<double, true>(LDLT_solve, "LDT_solve", to_decompose, to_solve);
    return 0;
}