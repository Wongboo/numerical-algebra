//
// Created by 包信和 on 2020/10/13.
//

#include <auxiliary.hpp>
#if MAJOR_NUM != 2
#include <Gauss_elimination.hpp>
#endif
#if MAJOR_NUM > 1
#include <Cholesky_decompose.hpp>
#endif
#if MINOR_NUM == 2
#include <random>
#define auxiliary(a, b, c) auxiliary_impl<T, true>(a, #a, b, c)
#else
#define auxiliary(a, b, c) auxiliary_impl(a, #a, b, c)
#endif

using namespace happy_matrix;

int main(){
#if MINOR_NUM == 1
    using T = long double;
    constexpr size_t size = 84;
    matrix<T> to_decompose(size, vector<T>(size));
    vector<T> to_solve(size);

    for (size_t i = 0; i < size; i++){
        if (i != 0)
            to_decompose[i][i - 1] = 8;
        to_decompose[i][i] = 6;
        if (i != size - 1)
            to_decompose[i][i + 1] = 1;
    }

    to_solve[0] = 7;
    to_solve[size - 1] = 14;
    for (int i = 1; i < size - 1; ++i)
        to_solve[i] = 15;
#elif MINOR_NUM == 2
    using T = double;
    constexpr size_t size = 100;
    matrix<T> to_decompose(size, vector<T>(size));
    vector<T> to_solve(size);
    std::random_device rd;  //Will be used to obtain a seed for the random number engine
    std::mt19937 gen(rd()); //Standard mersenne_twister_engine seeded with rd()
    std::uniform_real_distribution<> dis(-1.0, 1.0);

    for (size_t i = 0; i < size; ++i){
        if (i != 0)
            to_decompose[i][i - 1] = to_decompose[i - 1][i]= 1;
        to_decompose[i][i] = 10;
    }

    for (size_t i = 0; i < size; ++i) {
        // Use dis to transform the random unsigned int generated by gen into a
        // T in [-1, 1). Each call to dis(gen) generates a new random T
        to_solve[i] = dis(gen);
    }
#else
    using T = long double;
    constexpr size_t size = 40;
    matrix<T> to_decompose(size, vector<T>(size));
    vector<T> to_solve(size);

    for (size_t i = 0; i < size; ++i)
        for (size_t j = 0; j < size; ++j){
            to_decompose[i][j] += 1.0/(i + j + 1); //NOLINT
            to_solve[i] += 1.0/(i + j + 1); //NOLINT
        }
#endif
#if MAJOR_NUM != 2
    auxiliary(Gauss_solve_normal, to_decompose, to_solve);
    auxiliary(Gauss_solve_column, to_decompose, to_solve);
#endif
#if MAJOR_NUM > 1
    auxiliary(LLT_solve, to_decompose, to_solve);
    auxiliary(LDLT_solve, to_decompose, to_solve);
#endif
}
